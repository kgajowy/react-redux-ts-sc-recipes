{"version":3,"sources":["actions/action-types.ts","services/recipe.service.ts","actions/recipes.actions.ts","components/Checkbox.tsx","components/CheckboxLabel.tsx","components/Input.tsx","ingredient/Ingredient.tsx","recipe/Recipe.tsx","recipe/RecipeContainer.tsx","App.tsx","reducers/recipes.reducer.ts","serviceWorker.ts","index.tsx"],"names":["ActionTypes","storeRecipes","recipes","localStorage","setItem","JSON","stringify","Promise","resolve","e","success","type","payload","error","fetchRecipes","dispatch","parse","getItem","clear","getRecipes","then","r","GetRecipesOk","catch","GetRecipesError","Error","editRecipe","recipe","getState","target","findIndex","id","SaveRecipeError","SaveRecipeOk","SaveRecipe","Checkbox","styled","input","_templateObject","CheckboxLabel","span","CheckboxLabel_templateObject","Input","Input_templateObject","Ingredient","_ref","_ref$ingredient","ingredient","_ref$ingredient$requi","required","defaultRequired","defaultName","name","rest","Object","objectWithoutProperties","onChange","_useState","useState","_useState2","slicedToArray","switchRequired","_useState3","_useState4","changeName","react_default","a","createElement","value","placeholder","_onChange","_x","apply","this","arguments","toString","objectSpread","checked","_onChange2","_x2","List","div","Recipe_templateObject","Name","_templateObject2","Recipe","ingredientChange","console","log","recipeName","changeRecipeName","recipeRef","useRef","memoDebounce","useCallback","debounce","useEffect","ingredients","map","ing","ingredient_Ingredient","key","connect","_ref2","fetch","edit","_trigger","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","trigger","recipe_Recipe","App","recipe_RecipeContainer","Component","defaultState","pending","recipesReducer","state","length","undefined","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6JAGYA,iICUCC,SAAe,SAACC,GACzB,IAEI,OADAC,aAAaC,QAbD,UAasBC,KAAKC,UAAUJ,IAC1CK,QAAQC,SAAQ,GACzB,MAAOC,GACL,OAAOF,QAAQC,SAAQ,gBDfnBR,qYEeZ,IAoBMU,EAAU,SAACC,EAAyBC,GAA1B,MAA8D,CAC1ED,OAAMC,YAGJC,EAAQ,SAACF,EAAuBC,GAAxB,MAAyD,CACnED,OAAMC,YAGGE,EAAe,kBACxB,SAACC,GAAD,OD3CsB,WACtB,IACI,OAAOR,QAAQC,QAAQH,KAAKW,MAAMb,aAAac,QAJnC,YAI2D,OACzE,MAAOR,GAEL,OADAN,aAAae,QACNX,QAAQC,QAAQ,KCuCvBW,GACKC,KAAK,SAAAC,GAAC,OAAIN,GA/BCH,EA+BuBS,EA/Bc,CACzDV,KAAMX,EAAYsB,aAClBV,aAFmB,IAACA,IAgCXW,MAAM,kBAAMR,EAASF,EAAMb,EAAYwB,gBAAiB,IAAIC,MAAM,oCAIlEC,EAAa,SAACC,GAAD,OACtB,SAACZ,EAAuDa,GAOpD,IAAM1B,EAAU0B,IAAW1B,QAAQA,QAC7B2B,EAAS3B,EAAQ4B,UAAU,SAAAT,GAAC,OAAIA,EAAEU,KAAOJ,EAAOI,KAMtD,OALgB,IAAZF,EACAd,EAASF,EAAMb,EAAYgC,gBAAiB,IAAIP,MAAM,uBAEtDvB,EAAQ2B,GAAUF,EAEf1B,EAAaC,GACfkB,KAAK,kBAAML,EAASL,EAAQV,EAAYiC,aAAc,oBACtDb,KAAK,kBAAML,GA3CHH,EA2CwBe,EA3CS,CAClDhB,KAAMX,EAAYkC,WAClBtB,aAFgB,IAACA,IA4CRW,MAAM,kBAAMR,EAASF,EAAMb,EAAYgC,gBAAiB,IAAIP,MAAM,8SCtExE,IAAMU,EAAWC,IAAOC,MAAVC,mHCAd,IAAMC,EAAgBH,IAAOI,KAAVC,oXCAnB,IAAMC,EAAQN,IAAOC,MAAVM,qBCgCHC,EAzBoC,SAAAC,GAA6F,IAAAC,EAAAD,EAA3FE,WAA2FC,EAAAF,EAA9EG,SAAUC,OAAoE,IAAAF,KAArCG,EAAqCL,EAA3CM,KAAsBC,EAAqBC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,qBAAdU,EAAcX,EAAdW,SAAcC,EACzGC,mBAASR,GADgGS,EAAAL,OAAAM,EAAA,EAAAN,CAAAG,EAAA,GACrIR,EADqIU,EAAA,GAC3HE,EAD2HF,EAAA,GAAAG,EAEjHJ,mBAASP,GAFwGY,EAAAT,OAAAM,EAAA,EAAAN,CAAAQ,EAAA,GAErIV,EAFqIW,EAAA,GAE/HC,EAF+HD,EAAA,GAI5I,OAEIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACzB,EAAD,CAAO0B,MAAOhB,EACPzC,KAAK,OACL0D,YAAY,qBACZb,SAAQ,SAAAc,GAAA,SAAAd,EAAAe,GAAA,OAAAD,EAAAE,MAAAC,KAAAC,WAAA,OAAAlB,EAAAmB,SAAA,kBAAAL,EAAAK,YAAAnB,EAAA,CAAE,SAAC/C,GACPuD,EAAWvD,EAAEoB,OAAOuC,OACpBZ,EAASF,OAAAsB,EAAA,EAAAtB,CAAA,GAAID,EAAL,CAAWD,KAAM3C,EAAEoB,OAAOuC,MAAOnB,kBAGpDgB,EAAAC,EAAAC,cAAChC,EAAD,CAAUxB,KAAK,WAAWkE,QAAS5B,EAAUO,SAAQ,SAAAsB,GAAA,SAAAtB,EAAAuB,GAAA,OAAAD,EAAAN,MAAAC,KAAAC,WAAA,OAAAlB,EAAAmB,SAAA,kBAAAG,EAAAH,YAAAnB,EAAA,CAAE,SAAC/C,GACpDoD,EAAepD,EAAEoB,OAAOgD,SACxBrB,EAASF,OAAAsB,EAAA,EAAAtB,CAAA,GAAID,EAAL,CAAWD,OAAMH,SAAUxC,EAAEoB,OAAOgD,eAEhDZ,EAAAC,EAAAC,cAAC5B,EAAD,0PCfZ,IA8BMyC,EAAO5C,IAAO6C,IAAVC,KAKJC,EAAO/C,YAAOM,EAAPN,CAAHgD,KAMKC,EAzCgC,SAAAxC,GAAwB,IAAtBW,EAAsBX,EAAtBW,SAAU7B,EAAYkB,EAAZlB,OACjD2D,EAAmB,SAACvC,GACtBwC,QAAQC,IAAIzC,EAAZ,qBAF+DU,EAI5BC,mBAAS/B,EAAOyB,MAJYO,EAAAL,OAAAM,EAAA,EAAAN,CAAAG,EAAA,GAI5DgC,EAJ4D9B,EAAA,GAIhD+B,EAJgD/B,EAAA,GAK7DgC,EAAYC,iBAAO,MACnBC,EAAeC,sBAAYC,YAASvC,EAAU,KAAO,CAACmC,IAE5DK,oBAAU,WACFP,IAAe9D,EAAOyB,OAG1BzB,EAAOyB,KAAOqC,EACdI,EAAalE,KACd,CAAC8D,IAKJ,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,EAAD,CAAMf,MAAOqB,EAAYjC,SAJb,SAAC/C,GAAD,OAA4CiF,EAAiBjF,EAAEoB,OAAOuC,UAKlFH,EAAAC,EAAAC,cAACa,EAAD,KACKrD,EAAOsE,YAAYC,IAAI,SAACC,GAAD,OACpBlC,EAAAC,EAAAC,cAACiC,EAAD,CAAYC,IAAKF,EAAIpE,GAAIgB,WAAYoD,EAAK3C,SAAU8B,SCMzDgB,cATS,SAAAC,GAAA,MAAkD,CACtErG,QADoBqG,EAAErG,QAAUA,UAIT,SAACa,GAAD,MAAiC,CACxDyF,MAAO,kBAAMzF,EAASD,MACtB2F,KAAM,SAAC9E,GAAD,OAAwBZ,EAASW,EAAWC,OAGvC2E,CA1BwD,SAAAzD,GAA4B,IAA1B3C,EAA0B2C,EAA1B3C,QAASsG,EAAiB3D,EAAjB2D,MAAOC,EAAU5D,EAAV4D,KAOrF,OANAT,oBAAU,WAAM,SAAAU,IAAA,OAAAA,EAAApD,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA1C,EAAA2C,KACZ,SAAAC,IAAA,OAAAF,EAAA1C,EAAA6C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUV,IADV,wBAAAQ,EAAAG,SAAAL,OADYtC,MAAAC,KAAAC,YAAA,WAAAgC,EAAAlC,MAAAC,KAAAC,WAIZ0C,IACD,IAECnD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCAEIjE,EAAQgG,IAAI,SAAA7E,GAAC,OAAI4C,EAAAC,EAAAC,cAACkD,EAAD,CAAQhB,IAAKhF,EAAEU,GAAIJ,OAAQN,EAAGmC,SAAUiD,SCf1Da,mLARP,OACIrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,cAJEC,aCMLC,SAA6B,CACtCvH,QAAS,CAAC,CACN6B,GAAI,EACJqB,KAAM,aACN6C,YAAa,CAAC,CACV7C,KAAM,WACNH,UAAU,EACVlB,GAAI,GACL,CACCqB,KAAM,SACNrB,GAAI,KAET,CACCA,GAAI,EACJqB,KAAM,kCACN6C,YAAa,CAAC,CACV7C,KAAM,WACNH,UAAU,EACVlB,GAAI,GACL,CACCqB,KAAM,YACNH,UAAU,EACVlB,GAAI,MAGZ2F,SAAS,IAUEC,EAPQ,WAA6E,IAA5EC,EAA4ElD,UAAAmD,OAAA,QAAAC,IAAApD,UAAA,GAAAA,UAAA,GAAtD+C,EAGlC,OAHwF/C,UAAAmD,OAAA,EAAAnD,UAAA,QAAAoD,GACjFnH,KAEAiH,GC5BCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EAAcC,0BAA2B,CAC3CnI,QAASyH,IAEPW,EAAQC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OAG3EC,IAASC,OACL3E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAUP,MAAOA,GAAOrE,EAAAC,EAAAC,cAAC2E,EAAD,OAAmBC,SAASC,eAAe,SDsHjE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/H,KAAK,SAAAgI,GACjCA,EAAaC","file":"static/js/main.d2bf0294.chunk.js","sourcesContent":["import {Action} from 'redux'\nimport {Recipe} from '../interfaces/recipe'\n\nexport enum ActionTypes {\n    GetRecipes = 'GetRecipes',\n    GetRecipesOk = 'GetRecipesOk',\n    GetRecipesError = 'GetRecipesError',\n    AddRecipe = 'AddRecipe',\n    AddRecipeOk = 'AddRecipeOk',\n    AddRecipeError = 'AddRecipeError',\n    SaveRecipe = 'SaveRecipe',\n    SaveRecipeOk = 'SaveRecipeOk',\n    SaveRecipeError = 'SaveRecipeError',\n    DeleteRecipe = 'DeleteRecipe',\n    DeleteRecipeOk = 'DeleteRecipeOk',\n    DeleteRecipeError = 'DeleteRecipeError',\n}\n\nexport interface GetRecipes extends Action {\n    type: typeof ActionTypes.GetRecipes\n}\n\nexport interface GetRecipesOk extends Action {\n    type: typeof ActionTypes.GetRecipesOk\n    payload: Recipe[]\n}\n\nexport interface SaveRecipe extends Action {\n    type: typeof ActionTypes.SaveRecipe,\n    payload: Recipe\n}\n\nexport interface AddRecipe extends Action {\n    type: typeof ActionTypes.AddRecipe,\n    payload: Recipe\n}\n\nexport interface DeleteRecipe extends Action {\n    type: typeof ActionTypes.DeleteRecipe\n    payload: Recipe\n}\n\nexport interface SuccessAction extends Action {\n    type: ActionSuccessType\n    payload: string\n}\n\nexport interface ErrorAction extends Action {\n    type: ActionErrorType\n    payload: Error\n}\n\nexport type ActionErrorType =\n    | ActionTypes.GetRecipesError\n    | ActionTypes.SaveRecipeError\n    | ActionTypes.DeleteRecipeError\n    | ActionTypes.AddRecipeError\n\nexport type ActionSuccessType =\n    | typeof ActionTypes.SaveRecipeOk\n    | typeof ActionTypes.DeleteRecipeOk\n    | typeof ActionTypes.AddRecipeOk\n\nexport type RecipeActions =\n    | GetRecipes\n    | GetRecipesOk\n    | SaveRecipe\n    | AddRecipe\n    | DeleteRecipe\n    | SuccessAction\n    | ErrorAction\n\nexport type NotificationActions =\n    | SuccessAction\n    | ErrorAction\n","import {Recipe} from '../interfaces/recipe'\n\nconst RECIPES_KEY = 'recipes'\n\nexport const getRecipes = (): Promise<Recipe[]> => {\n    try {\n        return Promise.resolve(JSON.parse(localStorage.getItem(RECIPES_KEY) || '[]'))\n    } catch (e) {\n        localStorage.clear()\n        return Promise.resolve([])\n    }\n}\n\nexport const storeRecipes = (recipes: Recipe[]): Promise<boolean> => {\n    try {\n        localStorage.setItem(RECIPES_KEY, JSON.stringify(recipes))\n        return Promise.resolve(true)\n    } catch (e) {\n        return Promise.resolve(false)\n    }\n}\n","import {ThunkDispatch} from 'redux-thunk'\nimport {Recipe} from '../interfaces/recipe'\nimport {ThunkResult} from '../interfaces/thunk'\nimport {RootState} from '../reducers'\nimport {getRecipes, storeRecipes} from '../services/recipe.service'\nimport {\n    ActionErrorType,\n    ActionSuccessType,\n    ActionTypes,\n    AddRecipe,\n    DeleteRecipe,\n    ErrorAction,\n    GetRecipesOk,\n    RecipeActions,\n    SaveRecipe,\n    SuccessAction\n} from './action-types'\n\nconst recipesFetched = (payload: Recipe[]): GetRecipesOk => ({\n    type: ActionTypes.GetRecipesOk,\n    payload\n})\n\nconst recipeAdded = (payload: Recipe): AddRecipe => ({\n    type: ActionTypes.AddRecipe,\n    payload,\n})\n\nconst recipeSaved = (payload: Recipe): SaveRecipe => ({\n    type: ActionTypes.SaveRecipe,\n    payload,\n})\n\nconst recipeDeleted = (payload: Recipe): DeleteRecipe => ({\n    type: ActionTypes.DeleteRecipe,\n    payload,\n})\n\nconst success = (type: ActionSuccessType, payload: string): SuccessAction => ({\n    type, payload\n})\n\nconst error = (type: ActionErrorType, payload: Error): ErrorAction => ({\n    type, payload,\n})\n\nexport const fetchRecipes = (): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>) => (\n        getRecipes()\n            .then(r => dispatch(recipesFetched(r)))\n            .catch(() => dispatch(error(ActionTypes.GetRecipesError, new Error('Could not get the recipes.'))))\n    )\n)\n\nexport const editRecipe = (recipe: Recipe): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>, getState) => {\n        // a coincidence makes it that edit/save action and code in reducer are very similar\n        // normally, API call makes those different and there is no need to care about DRY we created there\n        // thus, we could optimise it for calling `recipeAdded` with all recipes to just replace them within reducer\n        // as we have IDs, key=... is fine. However, not doing that for demonstration purposes and possibility to\n        // replace localStorage with different Strategy\n        // TODO consider moving this logic into Service to keep implementation details hidden from our flow\n        const recipes = getState().recipes.recipes\n        const target = recipes.findIndex(r => r.id === recipe.id)\n        if (target === -1) {\n            dispatch(error(ActionTypes.SaveRecipeError, new Error('Recipe not found.')))\n        } else {\n            recipes[target] = recipe\n        }\n        return storeRecipes(recipes)\n            .then(() => dispatch(success(ActionTypes.SaveRecipeOk, 'Recipe saved.')))\n            .then(() => dispatch(recipeSaved(recipe)))\n            .catch(() => dispatch(error(ActionTypes.SaveRecipeError, new Error('Could not save the recipe.'))))\n    }\n)\n\nexport const addRecipe = (recipe: Recipe): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>, getState) => {\n        const recipes = getState().recipes.recipes\n        return storeRecipes([...recipes, recipe])\n            .then(() => dispatch(success(ActionTypes.AddRecipeOk, 'Recipe added.')))\n            .then(() => dispatch(recipeAdded(recipe)))\n            .catch(() => dispatch(error(ActionTypes.SaveRecipeError, new Error('Could not save the recipe.'))))\n    }\n)\n","import styled from 'styled-components'\n\nexport const Checkbox = styled.input`\n  cursor: pointer;\n  transition: box-shadow 400ms;\n  \n  &:checked {\n    color: black;\n  }\n  \n  &:hover {\n      box-shadow: 0 0 18px 0 rgba(0,0,0,0.75);\n  }\n`\n\n","import styled from 'styled-components'\n\nexport const CheckboxLabel = styled.span`\n  font-size: 0.7rem;\n  color: white;\n`\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    width: 200px;\n    height: 1rem;\n    color: #455A64;\n    border-radius: 0.4rem;\n    padding: 0.3rem 1rem;\n    transition: box-shadow 400ms;\n    outline: none;\n    \n    &:hover {\n      box-shadow: 0.5rem 0.5rem 1.5rem;\n    }\n    \n    &::placeholder {\n      color: #B0BEC5;\n    }\n`\n","import React, {useState} from 'react'\nimport {Checkbox, CheckboxLabel, Input} from '../components'\nimport {Ingredient as IngredientProps} from '../interfaces/ingredient'\n\ninterface Props {\n    ingredient: IngredientProps\n    onChange: (ingredient: IngredientProps) => any\n}\n\nconst Ingredient: React.FunctionComponent<Props> = ({ingredient: {required: defaultRequired = false, name: defaultName, ...rest}, onChange}) => {\n    const [required, switchRequired] = useState(defaultRequired)\n    const [name, changeName] = useState(defaultName)\n\n    return (\n        // div, otherwise applies flex from parent\n        <div>\n            <Input value={name}\n                   type='text'\n                   placeholder='Ingredient name...'\n                   onChange={(e) => {\n                       changeName(e.target.value)\n                       onChange({...rest, name: e.target.value, required})\n                   }}/>\n\n            <Checkbox type='checkbox' checked={required} onChange={(e) => {\n                switchRequired(e.target.checked)\n                onChange({...rest, name, required: e.target.checked})\n            }}/>\n            <CheckboxLabel>Required?</CheckboxLabel>\n        </div>\n    )\n}\n\n\nexport default Ingredient\n","import debounce from 'lodash-es/debounce'\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\nimport styled from 'styled-components'\nimport {Input} from '../components'\nimport Ingredient from '../ingredient/Ingredient'\nimport {Ingredient as IngredientType} from '../interfaces/ingredient'\nimport {Recipe as RecipeProps} from '../interfaces/recipe'\n\ninterface Props {\n    recipe: RecipeProps\n    onChange: (recipe: RecipeProps) => any\n}\n\nconst Recipe: React.FunctionComponent<Props> = ({onChange, recipe}) => {\n    const ingredientChange = (ingredient: IngredientType) => {\n        console.log(ingredient, `ingredientChange`)\n    }\n    const [recipeName, changeRecipeName] = useState(recipe.name)\n    const recipeRef = useRef(null)\n    const memoDebounce = useCallback(debounce(onChange, 2000), [recipeRef])\n\n    useEffect(() => {\n        if (recipeName === recipe.name) {   // prevent first trigger after initial render\n            return\n        }\n        recipe.name = recipeName\n        memoDebounce(recipe)\n    }, [recipeName])\n\n\n    const localChange = (e: React.ChangeEvent<HTMLInputElement>) => changeRecipeName(e.target.value)\n\n    return (\n        <div>\n            <Name value={recipeName} onChange={localChange}/>\n            <List>\n                {recipe.ingredients.map((ing) =>\n                    <Ingredient key={ing.id} ingredient={ing} onChange={ingredientChange}/>)}\n            </List>\n        </div>\n    )\n}\n\nconst List = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Name = styled(Input)`\n  font-size: 2rem;\n  height: 2.5rem;\n  \n`\n\nexport default Recipe\n\n// TODO recipe - reducer\n// TODO add/remove recipe\n// TODO adding new Ingredient\n// TODO add ingredient removal button as standalone component\n// TODO RWD\n","import React, {FunctionComponent, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {editRecipe, fetchRecipes} from '../actions/recipes.actions'\nimport {Recipe as RecipeType} from '../interfaces/recipe'\nimport {AppThunkDispatch} from '../interfaces/thunk'\nimport {RootState} from '../reducers'\nimport Recipe from './Recipe'\n\ninterface StateProps {\n    recipes: RecipeType[]\n}\n\ninterface DispatchProps {\n    fetch: () => any\n    edit: (recipe: RecipeType) => any\n}\n\nconst RecipeContainer: FunctionComponent<StateProps & DispatchProps> = ({recipes, fetch, edit}) => {\n    useEffect(() => {\n        async function trigger() {\n            await fetch()\n        }\n        trigger()\n    }, [])\n    return (\n        <div>\n            <h1>Collection of Recipes:</h1>\n            {\n                recipes.map(r => <Recipe key={r.id} recipe={r} onChange={edit}/>)\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = ({recipes: {recipes}}: RootState): StateProps => ({\n    recipes,\n})\n\nconst mapDispatchToProps = (dispatch: AppThunkDispatch) => ({\n    fetch: () => dispatch(fetchRecipes()),\n    edit: (recipe: RecipeType) => dispatch(editRecipe(recipe)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeContainer)\n","import React, {Component} from 'react'\nimport RecipeContainer from './recipe/RecipeContainer'\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <RecipeContainer/>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import {RecipeActions} from '../actions/action-types'\nimport {Recipe} from '../interfaces/recipe'\n\nexport interface RecipesState {\n    recipes: Array<Recipe>\n    pending: boolean\n    error?: Error\n}\n\nexport const defaultState: RecipesState = {\n    recipes: [{\n        id: 0,\n        name: 'pomidorowa',\n        ingredients: [{\n            name: 'pomidory',\n            required: true,\n            id: 0,\n        }, {\n            name: 'pieprz',\n            id: 1,\n        }]\n    }, {\n        id: 1,\n        name: 'Drugie Danie Prawdziwego Polaka',\n        ingredients: [{\n            name: 'schabowy',\n            required: true,\n            id: 2,\n        }, {\n            name: 'ziemniaki',\n            required: true,\n            id: 3,\n        }]\n    }],\n    pending: false,\n}\n\nconst recipesReducer = (state: RecipesState = defaultState, action: RecipeActions): RecipesState => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n\nexport default recipesReducer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and recipe)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport App from './App'\nimport './index.css'\nimport {RootState} from './reducers'\nimport recipesReducer from './reducers/recipes.reducer'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootReducer = combineReducers<RootState>({\n    recipes: recipesReducer\n})\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\n\nReactDOM.render(\n    <Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}