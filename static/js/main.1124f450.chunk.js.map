{"version":3,"sources":["actions/action-types.ts","services/recipe.service.ts","actions/recipes.actions.ts","components/remove/Remove.tsx","components/InputUi.tsx","components/input/Input.tsx","recipe/NewRecipe.tsx","components/Checkbox.tsx","components/CheckboxLabel.tsx","ingredient/Ingredient.tsx","ingredient/NewIngredient.tsx","recipe/Recipe.tsx","recipe/RecipeContainer.tsx","App.tsx","reducers/recipes.reducer.ts","serviceWorker.ts","index.tsx"],"names":["ActionTypes","storeRecipes","recipes","localStorage","setItem","JSON","stringify","Promise","resolve","e","submitRecipe","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","allRecipes","recipe","wrap","_context","prev","next","id","Date","getTime","abrupt","concat","toConsumableArray","then","stop","_x","_x2","apply","this","arguments","updateRecipe","_ref2","_callee2","target","_context2","findIndex","r","Error","_x3","_x4","success","type","payload","error","fetchRecipes","dispatch","parse","getItem","clear","getRecipes","GetRecipesOk","catch","GetRecipesError","editRecipe","getState","SaveRecipe","SaveRecipeOk","SaveRecipeError","addRecipe","AddRecipe","AddRecipeOk","deleteRecipe","afterChanges","filter","removeRecipe","DeleteRecipe","DeleteRecipeOk","DeleteRecipeError","Remove","props","react","Cross","styled","span","_templateObject","InputUi","input","InputUi_templateObject","Input","onSubmit","className","_useState","useState","_useState2","slicedToArray","name","setName","submit","onChange","value","onKeyPress","key","Plus","onClick","Input_templateObject","NewRecipe","add","Input_Input","ingredients","Checkbox","Checkbox_templateObject","CheckboxLabel","CheckboxLabel_templateObject","Ingredient","ingredient","required","switchRequired","_useState3","_useState4","changeName","react_default","createElement","placeholder","_onChange","toString","checked","_onChange2","NewIngredient","List","div","Recipe_templateObject","Name","_templateObject2","Recipe","removeElement","ingredientChange","recipeName","changeRecipeName","recipeRef","useRef","memoDebounce","useCallback","debounce","useEffect","NewIngredient_NewIngredient","push","map","ing","ingredient_Ingredient","connect","fetch","edit","remove","_trigger","trigger","NewRecipe_NewRecipe","recipe_Recipe","Remove_Remove","App","recipe_RecipeContainer","Component","defaultState","pending","recipesReducer","state","length","undefined","action","objectSpread","i","idx","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1124f450.chunk.js","sourcesContent":["import {Action} from 'redux'\nimport {Recipe} from '../interfaces/recipe'\n\nexport enum ActionTypes {\n    GetRecipes = 'GetRecipes',\n    GetRecipesOk = 'GetRecipesOk',\n    GetRecipesError = 'GetRecipesError',\n    AddRecipe = 'AddRecipe',\n    AddRecipeOk = 'AddRecipeOk',\n    AddRecipeError = 'AddRecipeError',\n    SaveRecipe = 'SaveRecipe',\n    SaveRecipeOk = 'SaveRecipeOk',\n    SaveRecipeError = 'SaveRecipeError',\n    DeleteRecipe = 'DeleteRecipe',\n    DeleteRecipeOk = 'DeleteRecipeOk',\n    DeleteRecipeError = 'DeleteRecipeError',\n}\n\nexport interface GetRecipes extends Action {\n    type: typeof ActionTypes.GetRecipes\n}\n\nexport interface GetRecipesOk extends Action {\n    type: typeof ActionTypes.GetRecipesOk\n    payload: Recipe[]\n}\n\nexport interface SaveRecipe extends Action {\n    type: typeof ActionTypes.SaveRecipe,\n    payload: Recipe\n}\n\nexport interface AddRecipe extends Action {\n    type: typeof ActionTypes.AddRecipe,\n    payload: Recipe\n}\n\nexport interface DeleteRecipe extends Action {\n    type: typeof ActionTypes.DeleteRecipe\n    payload: Recipe\n}\n\nexport interface SuccessAction extends Action {\n    type: ActionSuccessType\n    payload: string\n}\n\nexport interface ErrorAction extends Action {\n    type: ActionErrorType\n    payload: Error\n}\n\nexport type ActionErrorType =\n    | ActionTypes.GetRecipesError\n    | ActionTypes.SaveRecipeError\n    | ActionTypes.DeleteRecipeError\n    | ActionTypes.AddRecipeError\n\nexport type ActionSuccessType =\n    | typeof ActionTypes.SaveRecipeOk\n    | typeof ActionTypes.DeleteRecipeOk\n    | typeof ActionTypes.AddRecipeOk\n\nexport type RecipeActions =\n    | GetRecipes\n    | GetRecipesOk\n    | SaveRecipe\n    | AddRecipe\n    | DeleteRecipe\n    | SuccessAction\n    | ErrorAction\n\nexport type NotificationActions =\n    | SuccessAction\n    | ErrorAction\n","import {Recipe} from '../interfaces/recipe'\n\nconst RECIPES_KEY = 'recipes'\n\nexport const getRecipes = (): Promise<Recipe[]> => {\n    try {\n        return Promise.resolve(JSON.parse(localStorage.getItem(RECIPES_KEY) || '[]'))\n    } catch (e) {\n        localStorage.clear()\n        return Promise.resolve([])\n    }\n}\n\nexport const storeRecipes = (recipes: Recipe[]): Promise<boolean> => {\n    try {\n        localStorage.setItem(RECIPES_KEY, JSON.stringify(recipes))\n        return Promise.resolve(true)\n    } catch (e) {\n        return Promise.resolve(false)\n    }\n}\n\nexport const removeRecipe = (allRecipes: Recipe[], recipe: Recipe): Promise<boolean> => {\n    const afterChanges = allRecipes.filter(r => r.id !== recipe.id)\n    return storeRecipes(afterChanges)\n}\n\nexport const submitRecipe = async (allRecipes: Recipe[], recipe: Recipe): Promise<Recipe> => {\n    recipe.id = new Date().getTime()\n    return storeRecipes([recipe, ...allRecipes]).then(() => {\n        return recipe\n    })\n}\n\nexport const updateRecipe = async (allRecipes: Recipe[], recipe: Recipe): Promise<boolean> => {\n    const target = allRecipes.findIndex(r => r.id === recipe.id)\n    if (target === -1) {\n        throw new Error('Recipe not found.')\n    } else {\n        allRecipes[target] = recipe\n    }\n    return storeRecipes(allRecipes)\n}\n","import {ThunkDispatch} from 'redux-thunk'\nimport {Recipe} from '../interfaces/recipe'\nimport {ThunkResult} from '../interfaces/thunk'\nimport {RootState} from '../reducers'\nimport {getRecipes, removeRecipe, submitRecipe, updateRecipe} from '../services/recipe.service'\nimport {\n    ActionErrorType,\n    ActionSuccessType,\n    ActionTypes,\n    AddRecipe,\n    DeleteRecipe,\n    ErrorAction,\n    GetRecipesOk,\n    RecipeActions,\n    SaveRecipe,\n    SuccessAction\n} from './action-types'\n\nconst recipesFetched = (payload: Recipe[]): GetRecipesOk => ({\n    type: ActionTypes.GetRecipesOk,\n    payload\n})\n\nconst recipeAdded = (payload: Recipe): AddRecipe => ({\n    type: ActionTypes.AddRecipe,\n    payload,\n})\n\nconst recipeSaved = (payload: Recipe): SaveRecipe => ({\n    type: ActionTypes.SaveRecipe,\n    payload,\n})\n\nconst recipeDeleted = (payload: Recipe): DeleteRecipe => ({\n    type: ActionTypes.DeleteRecipe,\n    payload,\n})\n\nconst success = (type: ActionSuccessType, payload: string): SuccessAction => ({\n    type, payload\n})\n\nconst error = (type: ActionErrorType, payload: Error): ErrorAction => ({\n    type, payload,\n})\n\nexport const fetchRecipes = (): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>) => (\n        getRecipes()\n            .then(r => dispatch(recipesFetched(r)))\n            .catch(() => dispatch(error(ActionTypes.GetRecipesError, new Error('Could not get the recipes.'))))\n    )\n)\n\nexport const editRecipe = (recipe: Recipe): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>, getState) => {\n        const recipes = getState().recipes.recipes\n        return updateRecipe(recipes, recipe)\n            .then(() => dispatch(recipeSaved(recipe)))\n            .then(() => dispatch(success(ActionTypes.SaveRecipeOk, 'Recipe saved.')))\n            .catch(() => dispatch(error(ActionTypes.SaveRecipeError, new Error('Could not save the recipe.'))))\n    }\n)\n\nexport const addRecipe = (recipe: Recipe): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>, getState) => {\n        const recipes = getState().recipes.recipes\n        return submitRecipe(recipes, recipe)\n            .then(r => dispatch(recipeAdded(r)))\n            .then(() => dispatch(success(ActionTypes.AddRecipeOk, 'Recipe added.')))\n            .catch(() => dispatch(error(ActionTypes.SaveRecipeError, new Error('Could not save the recipe.'))))\n    }\n)\n\nexport const deleteRecipe = (recipe: Recipe): ThunkResult<Promise<RecipeActions>> => (\n    (dispatch: ThunkDispatch<RootState, {}, RecipeActions>, getState) => {\n        const recipes = getState().recipes.recipes\n        return removeRecipe(recipes, recipe)\n            .then(() => dispatch(recipeDeleted(recipe)))\n            .then(() => dispatch(success(ActionTypes.DeleteRecipeOk, 'Recipe removed.')))\n            .catch(() => dispatch(error(ActionTypes.DeleteRecipeError, new Error('Could not remove the recipe.'))))\n    }\n)\n","import * as React from 'react'\nimport {HTMLAttributes} from 'react'\nimport styled from 'styled-components'\n\nexport const Remove: React.FunctionComponent<HTMLAttributes<HTMLSpanElement>> = (props) => (\n    <Cross {...props}>❌</Cross>\n    /*\n     <Image src={deleteIcon} alt={'Remove'} {...props} width={32} height={32}/>\n     */\n)\n\nconst Cross = styled.span`\n    cursor: pointer;\n    padding: 10px;\n    vertical-align: super;\n    color: transparent;\n    text-shadow:  0 0 0 white;\n    \n    &:hover {\n      text-shadow: 0 0 0 red;\n    }\n`\n","import styled from 'styled-components'\n\nexport const InputUi = styled.input`\n    width: 200px;\n    height: 1rem;\n    color: #455A64;\n    border-radius: 0.4rem;\n    padding: 0.3rem 1rem;\n    transition: box-shadow 400ms;\n    outline: none;\n    \n    &:hover {\n      box-shadow: 0.5rem 0.5rem 1.5rem;\n    }\n    \n    &::placeholder {\n      color: #B0BEC5;\n    }\n`\n","import * as React from 'react'\nimport {useState} from 'react'\nimport styled from 'styled-components'\nimport {InputUi} from '../InputUi'\n\ninterface Props {\n    onSubmit: (value: string) => any\n    className?: string\n}\n\nexport const Input: React.FunctionComponent<Props> = ({onSubmit, className}) => {\n    const [name, setName] = useState('')\n    const submit = () => {\n        if (name === '') {\n            return\n        }\n        onSubmit(name)\n        setName('')\n    }\n    const enterPressed = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            submit()\n        }\n    }\n\n    return (\n        <div>\n            <InputUi onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\n                     value={name}\n                     onKeyPress={enterPressed}\n                     className={className}/>\n            <Plus onClick={submit}>➕</Plus>\n        </div>\n    )\n}\n\n\nconst Plus = styled.span`\n  font-size: 1.3rem;\n  color: transparent;\n  text-shadow: 0 0 0 white;\n  vertical-align: middle;\n  padding-left: 10px;\n  cursor: pointer;\n  \n  &:hover {\n    text-shadow: 0 0 0 forestgreen;\n  }\n`\n","import * as React from 'react'\nimport {Input} from '../components/input/Input'\nimport {Recipe} from '../interfaces/recipe'\n\ninterface Props {\n    add: (recipe: Recipe) => any\n}\n\nexport const NewRecipe: React.FunctionComponent<Props> = ({add}) => <Input\n    onSubmit={(name: string) => add({name, ingredients: []} as any as Recipe)}/>\n\n","import styled from 'styled-components'\n\nexport const Checkbox = styled.input`\n  cursor: pointer;\n  transition: box-shadow 400ms;\n  \n  &:checked {\n    color: black;\n  }\n  \n  &:hover {\n      box-shadow: 0 0 18px 0 rgba(0,0,0,0.75);\n  }\n`\n\n","import styled from 'styled-components'\n\nexport const CheckboxLabel = styled.span`\n  font-size: 0.7rem;\n  color: white;\n`\n","import React, {useState} from 'react'\nimport {Checkbox, CheckboxLabel, InputUi} from '../components'\nimport {Ingredient as IngredientProps} from '../interfaces/ingredient'\n\ninterface Props {\n    ingredient: IngredientProps\n    onChange: (ingredient: IngredientProps) => any\n}\n\nconst Ingredient: React.FunctionComponent<Props> = ({ingredient, onChange}) => {\n    const [required, switchRequired] = useState(ingredient.required)\n    const [name, changeName] = useState(ingredient.name)\n\n    return (\n        // div, otherwise applies flex from parent\n        <div>\n            <InputUi value={name}\n                     type='text'\n                     placeholder='Ingredient name...'\n                     onChange={(e) => {\n                         changeName(e.target.value)\n                         ingredient.name = e.target.value\n                         onChange(ingredient)\n                     }}/>\n            <Checkbox type='checkbox' checked={required} onChange={(e) => {\n                switchRequired(e.target.checked)\n                ingredient.required = e.target.checked\n                onChange(ingredient)\n            }}/>\n            <CheckboxLabel>Required?</CheckboxLabel>\n        </div>\n    )\n}\n\n\nexport default Ingredient\n","import * as React from 'react'\nimport {Input} from '../components/input/Input'\nimport {Ingredient} from '../interfaces/ingredient'\n\ninterface Props {\n    add: (ingredient: Ingredient) => any\n}\n\nexport const NewIngredient: React.FunctionComponent<Props> = ({add}) => <Input\n    onSubmit={(name: string) => add({name} as Ingredient)}/>\n\n","import debounce from 'lodash-es/debounce'\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\nimport styled from 'styled-components'\nimport {InputUi} from '../components'\nimport Ingredient from '../ingredient/Ingredient'\nimport {NewIngredient} from '../ingredient/NewIngredient'\nimport {Ingredient as IngredientType} from '../interfaces/ingredient'\nimport {Recipe as RecipeProps} from '../interfaces/recipe'\n\ninterface Props {\n    recipe: RecipeProps\n    onChange: (recipe: RecipeProps) => any\n    removeElement?: React.ReactNode\n}\n\nconst Recipe: React.FunctionComponent<Props> = ({onChange, recipe, removeElement}) => {\n    const ingredientChange = (ingredient: IngredientType) => {\n        onChange(recipe)\n    }\n    const ingredientAdded = (ingredient: IngredientType) => {\n        recipe.ingredients.push(ingredient)\n        onChange(recipe)\n    }\n    const [recipeName, changeRecipeName] = useState(recipe.name)\n    const recipeRef = useRef(null)\n    const memoDebounce = useCallback(debounce(onChange, 2000), [recipeRef])\n\n    useEffect(() => {\n        if (recipeName === recipe.name) {   // prevent first trigger after initial render\n            return\n        }\n        recipe.name = recipeName\n        memoDebounce(recipe)\n    }, [recipeName])\n\n    const localChange = (e: React.ChangeEvent<HTMLInputElement>) => changeRecipeName(e.target.value)\n\n    return (\n        <div>\n            <Name value={recipeName} onChange={localChange}/>{removeElement}\n            <List>\n                <NewIngredient add={ingredientAdded}/>\n                {recipe.ingredients.map((ing) =>\n                    <Ingredient key={ing.id} ingredient={ing} onChange={ingredientChange}/>)}\n            </List>\n        </div>\n    )\n}\n\nconst List = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 0 30px 30px;\n`\n\nconst Name = styled(InputUi)`\n  font-size: 2rem;\n  height: 2.5rem;\n  \n`\n\nexport default Recipe\n\n// TODO add ingredient removal button\n// TODO add debounce to InputUi\n// TODO add 'Enter' keypress to InputUi\n// TODO replace all inputs with InputUi (move useXXX from Recipe to InputUi)\n// TODO RWD\n","import React, {FunctionComponent, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {addRecipe, deleteRecipe, editRecipe, fetchRecipes} from '../actions/recipes.actions'\nimport {Remove} from '../components/remove/Remove'\nimport {Recipe as RecipeType} from '../interfaces/recipe'\nimport {AppThunkDispatch} from '../interfaces/thunk'\nimport {RootState} from '../reducers'\nimport {NewRecipe} from './NewRecipe'\nimport Recipe from './Recipe'\n\ninterface StateProps {\n    recipes: RecipeType[]\n}\n\ninterface DispatchProps {\n    fetch: () => any\n    add: (recipe: RecipeType) => any\n    edit: (recipe: RecipeType) => any\n    remove: (recipe: RecipeType) => any\n}\n\nconst RecipeContainer: FunctionComponent<StateProps & DispatchProps> = ({recipes, fetch, edit, remove, add}) => {\n    useEffect(() => {\n        async function trigger() {\n            await fetch()\n        }\n        trigger()\n    }, [])\n    return (\n        <div>\n            <h1>New Recipe:</h1>\n            <NewRecipe add={add}/>\n            <h1>Collection of Recipes:</h1>\n            {\n                recipes.map(r =>\n                    <Recipe key={r.id}\n                            recipe={r}\n                            onChange={edit}\n                            removeElement={<Remove onClick={() => remove(r)}/>}/>\n                )\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = ({recipes: {recipes}}: RootState): StateProps => ({\n    recipes,\n})\n\nconst mapDispatchToProps = (dispatch: AppThunkDispatch) => ({\n    fetch: () => dispatch(fetchRecipes()),\n    edit: (recipe: RecipeType) => dispatch(editRecipe(recipe)),\n    add: (recipe: RecipeType) => dispatch(addRecipe(recipe)),\n    remove: (recipe: RecipeType) => dispatch(deleteRecipe(recipe)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeContainer)\n","import React, {Component} from 'react'\nimport RecipeContainer from './recipe/RecipeContainer'\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <RecipeContainer/>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import {ActionTypes, RecipeActions} from '../actions/action-types'\nimport {Recipe} from '../interfaces/recipe'\n\nexport interface RecipesState {\n    recipes: Array<Recipe>\n    pending: boolean\n    error?: Error\n}\n\nexport const defaultState: RecipesState = {\n    recipes: [],\n    pending: false,\n}\n\nconst recipesReducer = (state: RecipesState = defaultState, action: RecipeActions): RecipesState => {\n    switch (action.type) {\n        case ActionTypes.GetRecipesOk:\n            return {...state, recipes: action.payload}\n        case ActionTypes.DeleteRecipe:\n            return {...state, recipes: state.recipes.filter(r => r.id !== action.payload.id)}\n        case ActionTypes.AddRecipe:\n            return {...state, recipes: [action.payload, ...state.recipes]}\n        case ActionTypes.SaveRecipe: {\n            const i = state.recipes.findIndex(r => r.id === action.payload.id)\n            return {\n                ...state, recipes: state.recipes.map((r, idx) => idx === i ? action.payload : r)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport default recipesReducer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and recipe)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport App from './App'\nimport './index.css'\nimport {RootState} from './reducers'\nimport recipesReducer from './reducers/recipes.reducer'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootReducer = combineReducers<RootState>({\n    recipes: recipesReducer\n})\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\n\nReactDOM.render(\n    <Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}