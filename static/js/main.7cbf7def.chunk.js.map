{"version":3,"sources":["components/Checkbox.tsx","components/CheckboxLabel.tsx","components/Input.tsx","ingredient/Ingredient.tsx","recipe/Recipe.tsx","actions/action-types.ts","App.tsx","reducers/recipes.reducer.ts","serviceWorker.ts","index.tsx"],"names":["Checkbox","styled","input","_templateObject","CheckboxLabel","span","CheckboxLabel_templateObject","Input","Input_templateObject","Ingredient","_ref","_ref$ingredient","ingredient","_ref$ingredient$requi","required","defaultRequired","defaultName","name","rest","Object","objectWithoutProperties","onChange","_useState","useState","_useState2","slicedToArray","switchRequired","_useState3","_useState4","changeName","react_default","a","createElement","value","type","placeholder","_onChange","_x","apply","this","arguments","toString","e","target","objectSpread","checked","_onChange2","_x2","ActionTypes","List","div","Recipe_templateObject","Recipe","ingredients","ingredientChange","console","log","map","ing","ingredient_Ingredient","key","id","recipe","App","recipe_Recipe","Component","defaultState","recipes","pending","recipesReducer","state","length","undefined","action","FetchUsers","error","FetchUsersOk","payload","FetchUsersError","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cbf7def.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Checkbox = styled.input`\n  cursor: pointer;\n  transition: box-shadow 400ms;\n  \n  &:checked {\n    color: black;\n  }\n  \n  &:hover {\n      box-shadow: 0 0 18px 0 rgba(0,0,0,0.75);\n  }\n`\n\n","import styled from 'styled-components'\n\nexport const CheckboxLabel = styled.span`\n  font-size: 0.7rem;\n  color: white;\n`\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    width: 200px;\n    height: 1rem;\n    color: #455A64;\n    border-radius: 0.4rem;\n    padding: 0.3rem 1rem;\n    transition: box-shadow 400ms;\n    outline: none;\n    \n    &:hover {\n      box-shadow: 0.5rem 0.5rem 1.5rem;\n    }\n    \n    &::placeholder {\n      color: #B0BEC5;\n    }\n`\n","import React, {useState} from 'react'\nimport {Checkbox, CheckboxLabel, Input} from '../components'\nimport {Ingredient as IngredientProps} from '../interfaces/ingredient'\n\ninterface Props {\n    ingredient: IngredientProps\n    onChange: (ingredient: IngredientProps) => any\n}\n\nconst Ingredient: React.FunctionComponent<Props> = ({ingredient: {required: defaultRequired = false, name: defaultName, ...rest}, onChange}) => {\n    const [required, switchRequired] = useState(defaultRequired)\n    const [name, changeName] = useState(defaultName)\n\n    return (\n        // div, otherwise applies flex from parent\n        <div>\n            <Input value={name}\n                   type='text'\n                   placeholder='Ingredient name...'\n                   onChange={(e) => {\n                       changeName(e.target.value)\n                       onChange({...rest, name: e.target.value, required})\n                   }}/>\n\n            <Checkbox type='checkbox' checked={required} onChange={(e) => {\n                switchRequired(e.target.checked)\n                onChange({...rest, name, required: e.target.checked})\n            }}/>\n            <CheckboxLabel>Required?</CheckboxLabel>\n        </div>\n    )\n}\n\n\nexport default Ingredient\n","import React from 'react'\nimport styled from 'styled-components'\nimport Ingredient from '../ingredient/Ingredient'\nimport {Ingredient as IngredientType} from '../interfaces/ingredient'\nimport {Recipe as Props} from '../interfaces/recipe'\n\nconst Recipe: React.FunctionComponent<Props> = ({ingredients, name}) => {\n    const ingredientChange = (ingredient: IngredientType) => {\n        console.log(ingredient, `ingredientChange`)\n    }\n\n    return (\n        <div>\n            <h2>{name}</h2>\n            <List>\n                {ingredients.map((ing) => <Ingredient key={ing.id} ingredient={ing} onChange={ingredientChange}/>)}\n            </List>\n        </div>\n    )\n}\n\nconst List = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport default Recipe\n","import {Action} from 'redux'\nimport {Recipe} from '../interfaces/recipe'\n\nexport enum ActionTypes {\n    FetchUsers = 'FetchUsers',\n    FetchUsersOk = 'FetchUsersOk',\n    FetchUsersError = 'FetchUsersError'\n}\n\nexport interface FetchUsersAction extends Action {\n    type: typeof ActionTypes.FetchUsers\n}\n\nexport interface FetchUsersOkAction extends Action {\n    type: typeof ActionTypes.FetchUsersOk\n    payload: Recipe[]\n}\n\n\nexport interface FetchUsersErrorAction extends Action {\n    type: typeof ActionTypes.FetchUsersError\n    payload: Error\n}\n\n\nexport type UsersActions = FetchUsersAction | FetchUsersOkAction | FetchUsersErrorAction\n","import React, {Component} from 'react'\nimport Recipe from './recipe/Recipe'\n\nconst recipe = {\n    name: 'pomidorowa',\n    ingredients: [{\n        name: 'pomidory',\n        required: true,\n        id: 0,\n    }, {\n        name: 'pieprz',\n        id: 1,\n    }]\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Recipe {...recipe}/>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import {ActionTypes, UsersActions} from '../actions/action-types'\nimport {Recipe} from '../interfaces/recipe'\n\nexport interface RecipesState {\n    recipes: Array<Recipe>\n    pending: boolean\n    error?: Error\n}\n\nexport const defaultState: RecipesState = {\n    recipes: [],\n    pending: false,\n}\n\nconst recipesReducer = (state: RecipesState = defaultState, action: UsersActions): RecipesState => {\n    switch (action.type) {\n        case ActionTypes.FetchUsers:\n            return {...state, pending: true, error: undefined}\n        case ActionTypes.FetchUsersOk:\n            return {...state, pending: false, recipes: action.payload}\n        case ActionTypes.FetchUsersError:\n            return {...state, pending: false, error: action.payload}\n        default:\n            return state\n    }\n}\n\nexport default recipesReducer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and recipe)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport App from './App'\nimport './index.css'\nimport {RootState} from './reducers'\nimport recipesReducer from './reducers/recipes.reducer'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootReducer = combineReducers<RootState>({\n    recipes: recipesReducer\n})\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\n\nReactDOM.render(\n    <Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}